version: 2.1
jobs:
  create_backend_state_store:
    docker:
      - image: zenika/terraform-aws-cli:release-6.0_terraform-0.15.5_awscli-1.27.60
    steps:
      - checkout
      - run:
          name: Create s3 backend to store state on AWS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            cd backend/
            terraform init
            terraform plan
            terraform apply --auto-approve

  create_infrastructure:
    docker:
      - image: zenika/terraform-aws-cli:release-6.0_terraform-0.15.5_awscli-1.27.60
    steps:
      - checkout
      - run:
          name: Create infrastructure on AWS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            cd infrastructure/
            terraform init
            terraform plan
            terraform apply --auto-approve

  deploy_applications:
    docker:
      - image: zenika/terraform-aws-cli:release-6.0_terraform-0.15.5_awscli-1.27.60
    steps:
      - checkout
      - run:
          shell: /bin/bash
          name: Deploy portfolio and socks shop applications to EKS cluster
          command: |
            export CLUSTER_NAME="eks-cluster"
            export TAG=0.2.<< pipeline.number >>
            export DOCKER_IMAGE="docker-image=${DOCKER_LOGIN}/${CIRCLE_PROJECT_REPONAME}:$TAG"
            export MYSQL_PSSWRD="mysql-password=${MYSQL_PASSWORD}"
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            cd deployment/
            terraform init
            terraform plan -var $DOCKER_IMAGE -var $MYSQL_PSSWRD -out=plan.txt
            terraform apply plan.txt
            exit 0
      - run:
          name: Rerun the deployment if it fails
          command: |
            export CLUSTER_NAME="eks-cluster"
            export TAG=0.2.<< pipeline.number >>
            export DOCKER_IMAGE="docker-image=${DOCKER_LOGIN}/${CIRCLE_PROJECT_REPONAME}:$TAG"
            export MYSQL_PSSWRD="mysql-password=${MYSQL_PASSWORD}"
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            cd deployment/
            terraform init
            terraform plan -var $DOCKER_IMAGE -var $MYSQL_PSSWRD -out=plan.txt
            terraform apply plan.txt
  
  configure_monitoring:
    docker:
      - image: zenika/terraform-aws-cli:release-6.0_terraform-0.15.5_awscli-1.27.60
    steps:
      - checkout
      - run:
          name: Install and configuire helm
          command: sudo curl -L https://storage.googleapis.com/kubernetes-helm/helm-v2.11.0-linux-amd64.tar.gz | tar xz && sudo mv linux-amd64/helm /bin/helm && sudo rm -rf linux-amd64
      - run:
          name: Deploy prometheus and grafana
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            cd monitoring/
            terraform init
            terraform plan
            terraform apply --auto-approve
            exit 0
      - run:
          name: Rerun the deployment of prometheus and grafana if it fails
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            cd monitoring/
            terraform init
            terraform plan
            terraform apply --auto-approve
  
  destroy_everything:
    docker:
      - image: zenika/terraform-aws-cli:release-6.0_terraform-0.15.5_awscli-1.27.60
    steps:
      - checkout
      - run:
          name: Destroy prometheus
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            cd monitoring/
            terraform init
            terraform destroy --auto-approve
      - run:
          name: Destroy the application deployment
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            cd deployment/
            terraform init
            terraform destroy --auto-approve
      - run:
          name: Destroy the infrastructure on AWS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            cd infrastructure/
            terraform init
            terraform destroy --auto-approve
          
workflows:
  deployment:
    jobs:
      - create_backend_state_store:
          filters:
            branches:
              only: [create-backend]
      - create_infrastructure:
          requires: [create_backend_state_store]
      - deploy_applications:
          requires: [create_infrastructure]
      - configure_monitoring:
          requires: [deploy_applications]
      - destroy_everything:
          requires: [deploy_applications]
          filters:
            branches:
              only: [destroy]
